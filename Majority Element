Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
 

Follow-up: Could you solve the problem in linear time and in O(1) space?

1) sorting

class Solution:
    def majorityElement(self, nums):
      nums.sort()
      n=len(nums)
      return nums[n//2]

time complexity O(nlogn)

2) hash map

class Solution:
    def majorityElement(self, nums):
      n=len(nums)
      m=defaultdict(int)

      for num in nums:
        m[num]+=1

      n=n//2
      for key, value in m.items():
        if value > n :
          return key

      return 0

time complexity O(n) but space complxity O(K) -> K is  number of list compoenet

3) Boyer moore algoritm

class Solution:
    def majorityElement(self, nums):
      candidate=0
      count=0

      for num in nums:
        if count = 0 :
          candidate = num

        if num = candidate:
          count+=1
        else:
          count-=1

    return candidate

Time complexity O(n)   Space complexity O(1)  -> best solution
        
        
